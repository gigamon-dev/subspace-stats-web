@using Microsoft.Extensions.Options
@using SubspaceStats.Areas.League.Models.Season
@using SubspaceStats.Options
@model DetailsViewModel
@inject IOptions<LeagueOptions> leagueOptions

@{
	ViewData["Title"] = "Manage Season";
}

@await Html.PartialAsync("_LeagueSeasonChooser", Model.LeagueSeasonChooser)
@await Html.PartialAsync("_SeasonNav")
@* <h1>Manage Season</h1> *@

<div class="container">
	<div class="row">
		<table class="table table-borderless table-sm w-auto">
			<tr>
				<td class="text-end fw-bold">Season Name:</td>
				<td class="text-start">@Model.SeasonDetails.SeasonName</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">Created:</td>
				<td class="text-start">@TimeZoneInfo.ConvertTimeFromUtc(Model.SeasonDetails.CreatedTimestamp, leagueOptions.Value.TimeZone)</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">Start Date:</td>
				<td class="text-start">@Model.SeasonDetails.StartDate</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">End Date:</td>
				<td class="text-start">@Model.SeasonDetails.EndDate</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">Stat Period:</td>
				<td class="text-start">
					@if (Model.SeasonDetails.StatPeriodRange is not null)
					{
						<text>@Model.SeasonDetails.StatPeriodRange.Value.ToString()</text>
					}
				</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">Stat Game Type:</td>
				<td class="text-start">
					@if (Model.SeasonDetails.StatGameTypeId is not null && Model.GameTypes.TryGetValue(Model.SeasonDetails.StatGameTypeId.Value, out GameType? statGameType))
					{
						<text>@statGameType.Name</text>
					}
				</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">League Game Type:</td>
				<td class="text-start">
					@if (Model.SeasonDetails.LeagueGameTypeId is not null && Model.GameTypes.TryGetValue(Model.SeasonDetails.LeagueGameTypeId.Value, out GameType? leagueGameType))
					{
						<text>@leagueGameType.Name</text>
					}
				</td>
			</tr>
		</table>
	</div>
	<div class="row g-3">
		
		<div class="col-12 col-md-6 col-lg-4">
			<div class="card h-100">
				<div class="card-header text-center">Copy Season</div>
				<div class="card-body">
					<div class="card-text mb-3">A new season can be created using this season as a template. You'll be given a choice of which aspects to copy: players, teams, matches, and/or rounds.</div>
					<a asp-action="Copy" class="btn btn-primary  text-nowrap">Create a Copy</a>
				</div>
			</div>
		</div>
		@if (Model.SeasonDetails.StartDate is null)
		{
			<div class="col-12 col-md-6 col-lg-4">
				<div class="card h-100">
					<div class="card-header text-center">Season is not yet started</div>
					<div class="card-body">
						<div class="alert alert-info">When it is time, use this to start the season. It will set the season's <strong>Start Date</strong> and will create a <strong>Stat Period</strong> to store league stats into.</div>
						<form asp-action="Start">
							<div class="mb-3">
								<label for="StartDate" class="form-label">Start Date</label>
								<input id="StartDate" name="StartDate" type="date" class="form-control" />
							</div>
							<div class="d-flex">
								<button type="submit" class="btn btn-primary">Start Season</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		}
		@if (Model.SeasonDetails.StartDate is not null && Model.SeasonDetails.EndDate is null)
		{
			<div class="col-12 col-md-6 col-lg-4">
				<div class="card h-100">
					<div class="card-header text-center">End the season</div>
					<div class="card-body">
						<div class="alert alert-info">
							Marks the season as ended, giving it an end date.
							This will prevent games in the season from getting started or restarted (?startleaguematch -f) in case someone typos a Match Id.
						</div>
						<form asp-action="End">
							<div class="mb-3">
								<label for="EndDate" class="form-label">End Date</label>
								<input id="EndDate" name="EndDate" type="date" class="form-control" data-val="true" data-val-required="The End Date field is required." />
								<span class="text-danger field-validation-valid" data-valmsg-for="EndDate" data-valmsg-replace="true"></span>
							</div>
							<div class="d-flex">
								<button type="submit" class="btn btn-primary">End Season</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		}
		@if (Model.SeasonDetails.StartDate is not null && Model.SeasonDetails.EndDate is not null)
		{
			<div class="col-12 col-md-6 col-lg-4">
				<div class="card h-100">
					<div class="card-header text-center">Undo End Season</div>
					<div class="card-body">
						<div class="alert alert-info">Clears the season End Date.</div>
						<form asp-action="UndoEnd">
							<div class="d-flex">
								<button type="submit" class="btn btn-primary">Undo End Season</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		}
	</div>
</div>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
		await Html.RenderPartialAsync("_LeagueSeasonChooseScript", Model.LeagueSeasonChooser);
	}
}
