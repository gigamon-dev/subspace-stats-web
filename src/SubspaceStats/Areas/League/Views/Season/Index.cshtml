@using Microsoft.Extensions.Options
@using SubspaceStats.Areas.League.Models
@using SubspaceStats.Areas.League.Models.Season
@using SubspaceStats.Options
@using System.Text
@model OverviewViewModel
@inject IOptions<LeagueOptions> leagueOptions

@{
	ViewData["Title"] = "Season";
}

@await Html.PartialAsync("_LeagueSeasonChooser", Model.LeagueSeasonChooser)
@await Html.PartialAsync("_SeasonNav")
@* <h1>Season</h1> *@

<div class="container mt-3">
	<div class="row">
		<div class="col">
			<table class="table table-striped table-bordered table-hover text-nowrap">
				<thead>
					<tr>
						<th colspan="5" class="text-center">Upcoming Matches</th>
					</tr>
					<tr>
						<th>Time (ET)</th>
						<th>Teams</th>
						<th>Round</th>
						<th>Status</th>
						<th class="text-end">Match ID</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var scheduledGame in Model.ScheduledGames)
					{
						DateTime? gameTime = scheduledGame.GameTimestamp is not null
							? TimeZoneInfo.ConvertTimeFromUtc(scheduledGame.GameTimestamp.Value, leagueOptions.Value.TimeZone)
							: null;

						<tr>
							<td>
								@if (gameTime is null)
								{
									<span class="fst-italic">Not scheduled</span>
								}
								else
								{
									<text>@gameTime.Value.ToString("yyyy-MM-dd hh:mm tt")</text>
								}
							</td>
							<td>@scheduledGame.Teams</td>
							<td>
								@if (!string.IsNullOrWhiteSpace(scheduledGame.RoundName))
								{
									@scheduledGame.RoundName
								}
								else if (scheduledGame.RoundNumber is not null)
								{
									@scheduledGame.RoundNumber
								}
							</td>
							<td>@scheduledGame.Status</td>
							<td class="text-end">@scheduledGame.SeasonGameId</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div class="col">
			<table class="table table-striped table-bordered table-hover text-nowrap">
				<thead>
					<tr>
						<th colspan="4" class="text-center">Standings</th>
					</tr>
					<tr>
						<th>Team</th>
						<th class="text-end">Wins</th>
						<th class="text-end">Losses</th>
						<th class="text-end">Draws</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var teamStanding in Model.Standings)
					{
						<tr>
							<td><a asp-controller="Team" asp-action="Index" asp-route-teamId="@teamStanding.TeamId">@teamStanding.TeamName</a></td>
							<td class="text-end">@teamStanding.Wins</td>
							<td class="text-end">@teamStanding.Losses</td>
							<td class="text-end">@teamStanding.Draws</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div class="col">
			@{
				bool isOnly2TeamMatches = true;
				foreach (var game in Model.CompletedGames)
				{
					if (game.Teams.Count != 2)
					{
						isOnly2TeamMatches = false;
						break;
					}
				}
			}
			<table class="table table-striped table-bordered table-hover text-nowrap">
				<thead>
					<tr>
						<th colspan="4" class="text-center">Match Results</th>
					</tr>
					<tr>
						<th>Date</th>
						<th class="@(isOnly2TeamMatches ? "text-center" : "")">Teams</th>
						<th>Score</th>
						<th>Winner</th>
					</tr>
				</thead>
				<tbody>
					@foreach (GameRecord game in Model.CompletedGames)
					{
						DateTime? gameTime = game.GameTimestamp is not null
						? TimeZoneInfo.ConvertTimeFromUtc(game.GameTimestamp.Value, leagueOptions.Value.TimeZone)
						: null;

						<tr>
							<td>
								@if (gameTime is not null)
								{
									@gameTime.Value.ToString("yyyy-MM-dd hh:mm tt")
								}
							</td>
							<td>
								@if (isOnly2TeamMatches)
								{
									<div class="d-flex align-items-center">
										<div class="col text-end">
											<a asp-controller="Team" asp-action="Index" asp-route-teamId="@game.Teams[0].TeamId" class="text-nowrap">@game.Teams[0].TeamName</a>
										</div>
										<div class="col-auto px-2">vs</div>
										<div class="col text-start">
											<a asp-controller="Team" asp-action="Index" asp-route-teamId="@game.Teams[1].TeamId" class="text-nowrap">@game.Teams[1].TeamName</a>
										</div>
									</div>
								}
								else
								{
									for (int i = 0; i < game.Teams.Count; i++)
									{
										TeamRecord team = game.Teams[i];
										if (i > 0)
										{
											<text> vs </text>
										}
										<a asp-controller="Team" asp-action="Index" asp-route-teamId="@team.TeamId" class="text-nowrap">@team.TeamName</a>
									}
								}
							</td>
							<td>
								@{
									StringBuilder builder = new();
									for (int i = 0; i < game.Teams.Count; i++)
									{
										if (i > 0)
										{
											builder.Append(" - ");
										}

										builder.Append(game.Teams[i].Score);
									}

									if (game.GameId is not null)
									{
										<a asp-area="" asp-controller="Game" asp-action="Index" asp-route-id="@game.GameId">@builder.ToString()</a>
									}
									else
									{
										@builder.ToString()
									}
								}
							</td>
							<td>
								@{
									int winnerCount = 0;
									for (int i = 0; i < game.Teams.Count; i++)
									{
										TeamRecord team = game.Teams[i];
										if (team.IsWinner)
										{
											if (winnerCount++ > 0)
											{
												<text>, </text>
											}

											<a asp-controller="Team" asp-action="Index" asp-route-teamId="@team.TeamId" class="text-nowrap">@team.TeamName</a>
										}
									}
								}
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</div>

@section Scripts {
	@await Html.PartialAsync("_LeagueSeasonChooseScript", Model.LeagueSeasonChooser)
}
